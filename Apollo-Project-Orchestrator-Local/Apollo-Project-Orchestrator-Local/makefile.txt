# Makefile para Apollo Project Orchestrator
# Simplifica comandos Docker e opera√ß√µes de desenvolvimento

.PHONY: help build up down logs shell test clean dev prod backup restore

# Configura√ß√µes
COMPOSE_FILE_DEV = docker-compose.dev.yml
COMPOSE_FILE_PROD = docker-compose.yml
PROJECT_NAME = apollo

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Mostrar esta ajuda
	@echo "$(GREEN)Apollo Project Orchestrator - Comandos Dispon√≠veis:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

# =============================================================================
# DESENVOLVIMENTO
# =============================================================================

dev: ## Iniciar ambiente de desenvolvimento
	@echo "$(GREEN)üöÄ Iniciando ambiente de desenvolvimento...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) up -d
	@echo "$(GREEN)‚úÖ Ambiente iniciado!$(NC)"
	@echo "$(YELLOW)üì± Backend: http://localhost:5000$(NC)"
	@echo "$(YELLOW)üé® Frontend: http://localhost:3000$(NC)"
	@echo "$(YELLOW)üíæ Adminer: http://localhost:8080$(NC)"
	@echo "$(YELLOW)üìß MailHog: http://localhost:8025$(NC)"

dev-build: ## Rebuildar containers de desenvolvimento
	@echo "$(GREEN)üî® Rebuilding desenvolvimento...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) build --no-cache

dev-down: ## Parar ambiente de desenvolvimento
	@echo "$(YELLOW)‚èπÔ∏è  Parando ambiente de desenvolvimento...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) down

dev-logs: ## Ver logs do ambiente de desenvolvimento
	docker-compose -f $(COMPOSE_FILE_DEV) logs -f

# =============================================================================
# PRODU√á√ÉO
# =============================================================================

prod: ## Iniciar ambiente de produ√ß√£o
	@echo "$(GREEN)üöÄ Iniciando ambiente de produ√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE_PROD) up -d
	@echo "$(GREEN)‚úÖ Ambiente de produ√ß√£o iniciado!$(NC)"

prod-build: ## Rebuildar containers de produ√ß√£o
	@echo "$(GREEN)üî® Building produ√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE_PROD) build --no-cache

prod-down: ## Parar ambiente de produ√ß√£o
	@echo "$(YELLOW)‚èπÔ∏è  Parando ambiente de produ√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE_PROD) down

prod-logs: ## Ver logs do ambiente de produ√ß√£o
	docker-compose -f $(COMPOSE_FILE_PROD) logs -f

# =============================================================================
# UTILIT√ÅRIOS
# =============================================================================

shell: ## Acessar shell do container backend
	@echo "$(GREEN)üêö Acessando shell do backend...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend bash

shell-prod: ## Acessar shell do container backend (produ√ß√£o)
	@echo "$(GREEN)üêö Acessando shell do backend (produ√ß√£o)...$(NC)"
	docker-compose -f $(COMPOSE_FILE_PROD) exec backend bash

db-shell: ## Acessar shell do PostgreSQL
	@echo "$(GREEN)üíæ Acessando PostgreSQL...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec postgres psql -U apollo -d apollo_dev

db-shell-prod: ## Acessar shell do PostgreSQL (produ√ß√£o)
	@echo "$(GREEN)üíæ Acessando PostgreSQL (produ√ß√£o)...$(NC)"
	docker-compose -f $(COMPOSE_FILE_PROD) exec postgres psql -U apollo -d apollo_db

# =============================================================================
# TESTES
# =============================================================================

test: ## Executar testes
	@echo "$(GREEN)üß™ Executando testes...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend pytest -v --cov=src

test-watch: ## Executar testes em modo watch
	@echo "$(GREEN)üëÄ Executando testes em modo watch...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend pytest-watch

lint: ## Executar linting
	@echo "$(GREEN)üîç Executando linting...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend black --check src/
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend flake8 src/
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend isort --check-only src/

format: ## Formatar c√≥digo
	@echo "$(GREEN)‚ú® Formatando c√≥digo...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend black src/
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend isort src/

# =============================================================================
# BANCO DE DADOS
# =============================================================================

migrate: ## Executar migra√ß√µes
	@echo "$(GREEN)üîÑ Executando migra√ß√µes...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend flask db upgrade

migrate-create: ## Criar nova migra√ß√£o
	@echo "$(GREEN)üìù Criando nova migra√ß√£o...$(NC)"
	@read -p "Nome da migra√ß√£o: " name; \
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend flask db migrate -m "$$name"

seed: ## Popular banco com dados de exemplo
	@echo "$(GREEN)üå± Populando banco com dados de exemplo...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend python -c "from src.utils.seed import seed_database; seed_database()"

# =============================================================================
# BACKUP E RESTORE
# =============================================================================

backup: ## Fazer backup do banco
	@echo "$(GREEN)üíæ Fazendo backup do banco...$(NC)"
	mkdir -p backups
	docker-compose -f $(COMPOSE_FILE_PROD) exec postgres pg_dump -U apollo apollo_db > backups/apollo_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup criado em backups/$(NC)"

restore: ## Restaurar backup do banco
	@echo "$(YELLOW)‚ö†Ô∏è  Esta opera√ß√£o ir√° sobrescrever o banco atual!$(NC)"
	@read -p "Arquivo de backup: " file; \
	if [ -f "$$file" ]; then \
		docker-compose -f $(COMPOSE_FILE_PROD) exec -T postgres psql -U apollo -d apollo_db < "$$file"; \
		echo "$(GREEN)‚úÖ Backup restaurado!$(NC)"; \
	else \
		echo "$(RED)‚ùå Arquivo n√£o encontrado!$(NC)"; \
	fi

# =============================================================================
# LIMPEZA
# =============================================================================

clean: ## Limpar containers e volumes
	@echo "$(YELLOW)üßπ Limpando containers e volumes...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) down -v
	docker-compose -f $(COMPOSE_FILE_PROD) down -v
	docker system prune -f

clean-all: ## Limpeza completa (CUIDADO!)
	@echo "$(RED)‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover TUDO!$(NC)"
	@read -p "Tem certeza? (yes/no): " confirm; \
	if [ "$$confirm" = "yes" ]; then \
		docker-compose -f $(COMPOSE_FILE_DEV) down -v --rmi all; \
		docker-compose -f $(COMPOSE_FILE_PROD) down -v --rmi all; \
		docker system prune -af --volumes; \
		echo "$(GREEN)‚úÖ Limpeza completa realizada!$(NC)"; \
	else \
		echo "$(YELLOW)‚ùå Opera√ß√£o cancelada$(NC)"; \
	fi

# =============================================================================
# MONITORAMENTO
# =============================================================================

status: ## Ver status dos containers
	@echo "$(GREEN)üìä Status dos containers:$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) ps

health: ## Verificar health dos servi√ßos
	@echo "$(GREEN)üè• Verificando health dos servi√ßos...$(NC)"
	curl -s http://localhost:5000/health | jq '.' || echo "Backend n√£o dispon√≠vel"
	curl -s http://localhost:3000 > /dev/null && echo "Frontend: OK" || echo "Frontend: ERRO"

stats: ## Ver estat√≠sticas dos containers
	docker stats $(PROJECT_NAME)_backend_1 $(PROJECT_NAME)_postgres_1 $(PROJECT_NAME)_redis_1

# =============================================================================
# SETUP INICIAL
# =============================================================================

setup: ## Setup inicial do projeto
	@echo "$(GREEN)üõ†Ô∏è  Setup inicial do Apollo Project Orchestrator...$(NC)"
	
	# Verificar se Docker est√° instalado
	@which docker > /dev/null || (echo "$(RED)‚ùå Docker n√£o encontrado!$(NC)" && exit 1)
	@which docker-compose > /dev/null || (echo "$(RED)‚ùå Docker Compose n√£o encontrado!$(NC)" && exit 1)
	
	# Criar arquivo .env se n√£o existir
	@if [ ! -f .env ]; then \
		cp .env.docker .env; \
		echo "$(YELLOW)üìù Arquivo .env criado. Configure suas vari√°veis!$(NC)"; \
	fi
	
	# Criar diret√≥rios necess√°rios
	mkdir -p backend/logs backend/uploads backend/instance backups
	
	# Build inicial
	$(MAKE) dev-build
	
	# Iniciar servi√ßos
	$(MAKE) dev
	
	@echo "$(GREEN)‚úÖ Setup conclu√≠do!$(NC)"
	@echo "$(YELLOW)üìù Pr√≥ximos passos:$(NC)"
	@echo "   1. Configure o arquivo .env"
	@echo "   2. Execute: make migrate"
	@echo "   3. Execute: make seed"
	@echo "   4. Acesse: http://localhost:5000"

# =============================================================================
# DESENVOLVIMENTO AVAN√áADO
# =============================================================================

debug: ## Iniciar backend em modo debug
	@echo "$(GREEN)üêõ Iniciando backend em modo debug...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m flask run --host=0.0.0.0

install-deps: ## Instalar depend√™ncias no container
	@echo "$(GREEN)üì¶ Instalando depend√™ncias...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend pip install -r requirements/dev.txt

update-deps: ## Atualizar depend√™ncias
	@echo "$(GREEN)üîÑ Atualizando depend√™ncias...$(NC)"
	docker-compose -f $(COMPOSE_FILE_DEV) exec backend pip list --outdated
	@read -p "Continuar com atualiza√ß√£o? (y/n): " confirm; \
	if [ "$$confirm" = "y" ]; then \
		docker-compose -f $(COMPOSE_FILE_DEV) exec backend pip install -r requirements/dev.txt --upgrade; \
	fi